import json
import matplotlib.pyplot as plt
import random
import re
from typing import List, Tuple
import numpy as np


def get_sequences_answers(sampled_sequences: List[str]) -> List[Tuple[str, int]]:
    """Get the answer distribution from the sampled sequsences
    
    Args:
        sampled_sequences (List[str]): Sampled sequences from the model
        dataset_name (str): Name of the dataset
        
    Returns:
        List[Tuple[str, int]]: The answer distribution
    """
    # Clean the answers and remove empty strings
    answers = [_answer_cleaning(sequence) for sequence in sampled_sequences]
    # No longer needed
    # answers = [answer.strip() for answer in answers if answer != ""]
    # If no answers are present, return an empty list
    if len(answers) == 0:
        return []
    return answers


def _answer_cleaning(sequence: str) -> str:
    """Extract the answer from the generated sequence

    Args:
        sequence (str): Sequence generated by the model
        dataset_name (str): Name of the dataset

    Returns:
        str: The extracted answer
    """
    is_mathematical = True
    # Extract the answer from the sequence based on the dataset type
    if is_mathematical:
        return _mathematical_answer_cleaning(sequence)
    else:
        return sequence.strip().split()[-1]

def _mathematical_answer_cleaning(sequence: str) -> str:
    """Extract the mathematical answer from the generated sequence

    Args:
        sequence (str): Sequence generated by the model

    Returns:
        str: The extracted mathematical answer
    """
    # Extract the numerical answer from the sequence
    answer = [s for s in re.findall(r'-?\d+\.?\d*', sequence.replace(",", ""))]
    # Return the answer if present, else return an empty string
    if len(answer) == 0:
        return -np.inf
    # Handle the case where the answer ends with a period
    return float(answer[-1][:-1] if answer[-1].endswith(".") else answer[-1])

# GREEDY & BASELINE GSM8K GEMMA-2B
with open('/users/poojithapenta/desktop/COMPSCI-685-PROJECT/src/Plots/greedy__gsm8k__gemma-2b__output.json', 'r') as file:
    greedy_gemma2b_data = json.load(file)
with open('/users/poojithapenta/desktop/COMPSCI-685-PROJECT/src/Plots/baseline__gsm8k__gemma-2b__output.json', 'r') as file:
    baseline_gemma2b_data = json.load(file)

#GREEDY & BASELINE GSM8K GEMMA 7-B
with open('/users/poojithapenta/desktop/COMPSCI-685-PROJECT/src/Plots/greedy__gsm8k__gemma-7b__output.json', 'r') as file:
    greedy_gemma7b_data = json.load(file)
with open('/users/poojithapenta/desktop/COMPSCI-685-PROJECT/src/Plots/baseline__gsm8k__gemma-7b__output.json', 'r') as file:
    baseline_gemma7b_data = json.load(file)

#GREEDY & BASELINE GSMK GPT2-LARGE
with open('/users/poojithapenta/desktop/COMPSCI-685-PROJECT/src/Plots/greedy__gsm8k__gpt2-large__output.json', 'r') as file:
    greedy_gpt2_data = json.load(file)
with open('/users/poojithapenta/desktop/COMPSCI-685-PROJECT/src/Plots/baseline__gsm8k__gpt2-large__output.json', 'r') as file:
    baseline_gpt2_data = json.load(file)

def answer_presence(data,method):
    answer_presence=[]
    samples=[5,10,15,20,25,30,35,40]
    if method=='baseline':
        for i in samples:
            count=0
            for item in data:
                sampled_data = random.sample(item['generated_sequences'], i)
                ground_truth = float(item['ground_truth_answer'].replace(',', ''))
                x=get_sequences_answers(sampled_data)
                if ground_truth in x:
                    count += 1
            answer_presence.append(count)
    else:
        samples=[5,10,15,20,25,30,35,40]
        for i in samples:
            count=0
            for item in data:
                sampled_data = random.sample(item['generated_sequences'], 1)
                ground_truth = float(item['ground_truth_answer'].replace(',', ''))
                x=get_sequences_answers(sampled_data)
                if ground_truth in x:
                    count += 1
            answer_presence.append(count)

    return answer_presence

output_baseline_gemma_2b=answer_presence(baseline_gemma2b_data, method='baseline')
output_greedy_gemma_2b=answer_presence(greedy_gemma2b_data, method='greedy')
output_baseline_gemma_7b=answer_presence(baseline_gemma7b_data, method='baseline')
output_greedy_gemma_7b=answer_presence(greedy_gemma7b_data, method='greedy')
output_baseline_gpt2=answer_presence(baseline_gpt2_data,  method='baseline')
output_greedy_gpt2=answer_presence(greedy_gpt2_data, method='greedy')


samples=[5,10,15,20,25,30,35,40]
# Plot for Gemma-2B
plt.figure(figsize=(6, 6))
plt.plot(samples, output_baseline_gemma_2b, 'ro-', label='Baseline')
plt.plot(samples, output_greedy_gemma_2b, 'bo-', label='Greedy')
plt.title('Answer Presence vs. # of samples - GEMMA-2B')
plt.xlabel('Number of Sampled Reasoning Paths')
plt.ylabel('Answer Presence')
plt.legend()
plt.grid(True)
plt.show()

# Plot for Gemma-7B
plt.figure(figsize=(6, 6))
plt.plot(samples, output_baseline_gemma_7b, 'ro-', label='Baseline')
plt.plot(samples, output_greedy_gemma_7b, 'bo-', label='Greedy')
plt.title('Answer Presence vs. # of sampless - GEMMA-7B')
plt.xlabel('Number of Sampled Reasoning Paths')
plt.ylabel('Answer Presence')
plt.legend()
plt.grid(True)
plt.show()

# Plot for GPT2-LARGE
plt.figure(figsize=(6, 6))
plt.plot(samples, output_baseline_gpt2, 'ro-', label='Baseline')
plt.plot(samples, output_greedy_gpt2, 'bo-', label='Greedy')
plt.title('Answer Presence vs. # of samples - GPT2-LARGE')
plt.xlabel('Number of Sampled Reasoning Paths')
plt.ylabel('Answer Presence')
plt.legend()
plt.grid(True)
plt.show()
